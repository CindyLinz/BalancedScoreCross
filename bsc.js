// Generated by LiveScript 1.4.0
(function(){
  var escHtml, updateView, prepareInput;
  escHtml = function(str){
    return str.replace(/&/g, '&amps;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };
  updateView = function(){
    var labels, res$, i$, ref$, len$, label, divs, i, div, pivots, input, scores, canvas, ctx, padding, m, w, h, scoresPos, j$, j, colors, color;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = document.querySelectorAll('#config tr:first-of-type input')).length; i$ < len$; ++i$) {
      label = ref$[i$];
      res$.push(label.value);
    }
    labels = res$;
    divs = document.querySelectorAll('#view div');
    for (i$ = 0, len$ = divs.length; i$ < len$; ++i$) {
      i = i$;
      div = divs[i$];
      div.innerHTML = escHtml(labels[i]);
    }
    res$ = [];
    for (i$ = 0, len$ = (ref$ = document.querySelectorAll('#config input[type=number]')).length; i$ < len$; ++i$) {
      input = ref$[i$];
      res$.push(+input.value);
    }
    pivots = res$;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = document.querySelectorAll('#view input')).length; i$ < len$; ++i$) {
      input = ref$[i$];
      res$.push(+input.value);
    }
    scores = res$;
    canvas = document.querySelector('canvas');
    ctx = canvas.getContext('2d');
    padding = {
      left: 0,
      top: 20,
      right: 0,
      bottom: 20
    };
    for (i$ = 0; i$ < 5; ++i$) {
      i = i$;
      m = ctx.measureText(pivots[4 * i + 1]);
      padding.left >= (ref$ = m.width) || (padding.left = ref$);
      m = ctx.measureText(pivots[4 * i + 2]);
      padding.right >= (ref$ = m.width) || (padding.right = ref$);
    }
    padding.left += 10;
    padding.right += 10;
    w = h = 400;
    scoresPos = [];
    nextPos: for (i$ = 0; i$ < 4; ++i$) {
      i = i$;
      if (scores[i] >= pivots[i]) {
        scoresPos[i] = 0;
        continue nextPos;
      }
      for (j$ = 1; j$ < 5; ++j$) {
        j = j$;
        if (scores[i] >= pivots[4 * j + i]) {
          scoresPos[i] = (j - 1 + (scores[i] - pivots[4 * j - 4 + i]) / (pivots[4 * j + i] - pivots[4 * j - 4 + i])) / 4;
          continue nextPos;
        }
      }
      scoresPos[i] = 1;
    }
    canvas.width = w + padding.left + padding.right;
    canvas.height = h + padding.top + padding.bottom;
    ctx.font = '16px';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillStyle = '#000';
    for (i$ = 0; i$ < 5; ++i$) {
      i = i$;
      ctx.fillText(pivots[4 * i], padding.left + w / 4 * i, padding.top / 2);
      ctx.fillText(pivots[4 * i + 1], padding.left / 2, padding.top + h / 4 * i);
      ctx.fillText(pivots[4 * i + 2], padding.left + w + padding.right / 2, padding.top + h / 4 * i);
      ctx.fillText(pivots[4 * i + 3], padding.left + w / 4 * i, padding.top + h + padding.bottom / 2);
    }
    res$ = [];
    for (i$ = 0, len$ = (ref$ = document.querySelectorAll('#config .jscolor')).length; i$ < len$; ++i$) {
      input = ref$[i$];
      res$.push('#' + input.value);
    }
    colors = res$;
    colors.reverse();
    for (i$ = 0, len$ = colors.length; i$ < len$; ++i$) {
      i = i$;
      color = colors[i$];
      ctx.fillStyle = color;
      ctx.fillRect(padding.left, padding.top, w / 4 * (4 - i), h / 4 * (4 - i));
    }
    ctx.strokeStyle = '#000';
    ctx.lineWidth = 1;
    ctx.moveTo(padding.left + scoresPos[0] * w, padding.top);
    ctx.lineTo(padding.left + scoresPos[3] * w, padding.top + h);
    ctx.stroke();
    ctx.moveTo(padding.left, padding.top + scoresPos[1] * h);
    ctx.lineTo(padding.left + w, padding.top + scoresPos[2] * h);
    ctx.stroke();
  };
  prepareInput = function(){
    var inputTbody, clearEmptyInputTr, addNewInputTr;
    document.body.onchange = function(ev){
      updateView();
    };
    inputTbody = document.querySelector('#config tbody');
    clearEmptyInputTr = function(){
      var firstTr, lastTr, isEmpty, i$, ref$, len$, input;
      firstTr = inputTbody.querySelector('tr:first-of-type');
      lastTr = inputTbody.querySelector('tr:last-of-type');
      if (firstTr !== lastTr) {
        isEmpty = true;
        for (i$ = 0, len$ = (ref$ = lastTr.querySelectorAll('input')).length; i$ < len$; ++i$) {
          input = ref$[i$];
          if (!input.classList.contains('jscolor') && /\d/.exec(input.value)) {
            isEmpty = false;
            break;
          }
        }
        if (isEmpty) {
          inputTbody.removeChild(lastTr);
          clearEmptyInputTr();
        }
      }
    };
    addNewInputTr = function(){
      var x$, newInputTr, picker;
      x$ = newInputTr = document.createElement('tr');
      x$.innerHTML = '<td><input><td><input><td><input><td><input>' + '<td><input class=jscolor>';
      picker = new jscolor(newInputTr.querySelector('td:last-of-type input'));
      picker.fromHSV(Math.random() * 360, 20, 100);
      inputTbody.appendChild(newInputTr);
    };
    updateView();
  };
  prepareInput();
}).call(this);
